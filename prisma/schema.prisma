// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  name  String?
  email String @unique
  bio String?
  social String? //need change later
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  emailVerified DateTime?
  image         String?
  passwordNote String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  Notes Note[]
  Folder Folder[]
  
  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("account")
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@map("session")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])

  @@map("verificationtoken")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])

  @@map("authenticator")
}

model Note {
  id String @id @default(cuid())
  title String
  note String?
  todos String[]
  type String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isSecure Boolean @default(false)
  tags String[]
  isHang Boolean @default(false)
  description String?
  schedulerDays String[]
  schedulerType String?
  schedulerStartTime DateTime?
  schedulerEndTime DateTime?
  schedulerImportant Int?
  reschedule Boolean? @default(true)

  userId String
  user User @relation(fields: [userId], references: [id])

  folderId String?

  @@map("note")
}

model Tag {
  id String @id @default(cuid())
  text String
  flag String
  icon String
  group String?
  isNew Boolean?

  creatorId String?

  @@map("tag")
}

model Folder {
  id String @id @default(cuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type String?

  userId String
  user User @relation(fields: [userId], references: [id])

  @@map("folder")
}

model UserQuote {
  id String @id @default(cuid())
  userId String
  quoteId Int
  updatedAt DateTime

  @@map("userquote")
}

model Quote {
  id Int @id @default(autoincrement())
  quote String
  author String

  @@map("quote")
}

model HabitsHistory {
  id String @id @default(cuid())
  userId String
  habitId String
  isCompleted Boolean
  todos String[]
  completedTime DateTime @default(now())

  @@map("habitshistory")
}

model Timer {
  id String @id @default(cuid())
  itemId String
  type String?
  startTime DateTime @default(now())
  endTime DateTime?
  isEnd Boolean? @default(false)
  autoComplete Boolean? @default(false)

  @@map("timer")
}